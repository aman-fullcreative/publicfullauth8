name: TruffleHog Secret Scanning

on:
  # Trigger on pull requests to any branch
  pull_request:
    branches: ['*']
    types: [opened, synchronize, reopened]
  
  # Trigger on pushes to main branches
  push:
    branches: [main, master, develop]
  
  # Scheduled full repository scan (weekly)
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  
  # Manual dispatch for on-demand scanning
  workflow_dispatch:
    inputs:
      scan_depth:
        description: 'Scan depth'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full_branch
          - full_history

permissions:
  contents: read
  pull-requests: write
  security-events: write
  issues: write

jobs:
  secret-scan:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    env:
      # Archive settings to prevent resource exhaustion
      ARCHIVE_MAX_SIZE: 104857600  # 100MB
      ARCHIVE_MAX_DEPTH: 10
      ARCHIVE_TIMEOUT: 300  # 5 minutes
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine Scan Strategy
        id: scan-strategy
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "mode=incremental" >> $GITHUB_OUTPUT
            echo "base=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
            echo "head=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
            echo "args=--since-commit=${{ github.event.pull_request.base.sha }} --max-depth=50" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "mode=incremental" >> $GITHUB_OUTPUT
            echo "base=${{ github.event.before }}" >> $GITHUB_OUTPUT
            echo "head=${{ github.event.after }}" >> $GITHUB_OUTPUT
            echo "args=--since-commit=${{ github.event.before }} --max-depth=20" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "mode=full_history" >> $GITHUB_OUTPUT
            echo "args=--results=verified,unknown --only-verified" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            case "${{ github.event.inputs.scan_depth }}" in
              "full_history")
                echo "mode=full_history" >> $GITHUB_OUTPUT
                echo "args=--results=verified,unknown" >> $GITHUB_OUTPUT
                ;;
              "full_branch")
                echo "mode=full_branch" >> $GITHUB_OUTPUT
                echo "args=--max-depth=1000" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "mode=incremental" >> $GITHUB_OUTPUT
                echo "args=--max-depth=50" >> $GITHUB_OUTPUT
                ;;
            esac
          fi
      
      - name: Run TruffleHog Scan
        id: trufflehog-scan
        uses: trufflesecurity/trufflehog@v3.82.13
        with:
          base: ${{ steps.scan-strategy.outputs.base }}
          head: ${{ steps.scan-strategy.outputs.head }}
          extra_args: >-
            --config=.trufflehog.yml
            --exclude-paths=.trufflehog-exclude-paths.txt
            --format=json
            --archive-max-size=${{ env.ARCHIVE_MAX_SIZE }}
            --archive-max-depth=${{ env.ARCHIVE_MAX_DEPTH }}
            --archive-timeout=${{ env.ARCHIVE_TIMEOUT }}s
            --concurrency=4
            --filter-unverified
            --filter-entropy=3.0
            --no-update
            ${{ steps.scan-strategy.outputs.args }}
        continue-on-error: true

      - name: Process Scan Results
        id: process-results
        if: always()
        run: |
          if [[ -f "trufflehog_output.json" ]]; then
            # Count findings
            TOTAL_SECRETS=$(jq length trufflehog_output.json)
            VERIFIED_SECRETS=$(jq '[.[] | select(.Verified == true)] | length' trufflehog_output.json)
            UNVERIFIED_SECRETS=$(jq '[.[] | select(.Verified == false)] | length' trufflehog_output.json)
            
            echo "total_secrets=$TOTAL_SECRETS" >> $GITHUB_OUTPUT
            echo "verified_secrets=$VERIFIED_SECRETS" >> $GITHUB_OUTPUT
            echo "unverified_secrets=$UNVERIFIED_SECRETS" >> $GITHUB_OUTPUT
            
            # Generate summary
            if [[ $TOTAL_SECRETS -gt 0 ]]; then
              echo "secrets_found=true" >> $GITHUB_OUTPUT
              echo "summary=Found $TOTAL_SECRETS secret(s): $VERIFIED_SECRETS verified, $UNVERIFIED_SECRETS unverified" >> $GITHUB_OUTPUT
            else
              echo "secrets_found=false" >> $GITHUB_OUTPUT
              echo "summary=No secrets detected" >> $GITHUB_OUTPUT
            fi
          else
            echo "secrets_found=false" >> $GITHUB_OUTPUT
            echo "summary=Scan completed - no results file generated" >> $GITHUB_OUTPUT
            echo "total_secrets=0" >> $GITHUB_OUTPUT
            echo "verified_secrets=0" >> $GITHUB_OUTPUT
            echo "unverified_secrets=0" >> $GITHUB_OUTPUT
          fi

      - name: Comment on Pull Request
        if: github.event_name == 'pull_request' && steps.process-results.outputs.secrets_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const resultsFile = 'trufflehog_output.json';
              if (!fs.existsSync(resultsFile)) {
                console.log('No results file found');
                return;
              }
              
              const results = JSON.parse(fs.readFileSync(resultsFile, 'utf8'));
              
              if (results.length === 0) {
                return;
              }
              
              let comment = `## üîç TruffleHog Secret Scan Results\n\n`;
              comment += `**Status:** ‚ö†Ô∏è Secrets Detected\n`;
              comment += `**Total Findings:** ${results.length}\n`;
              comment += `**Verified Secrets:** ${results.filter(r => r.Verified).length}\n`;
              comment += `**Unverified Secrets:** ${results.filter(r => !r.Verified).length}\n\n`;
              
              comment += `### üö® Action Required\n\n`;
              
              const verifiedSecrets = results.filter(r => r.Verified);
              if (verifiedSecrets.length > 0) {
                comment += `**‚ö†Ô∏è CRITICAL:** ${verifiedSecrets.length} verified secret(s) found! These are active credentials that must be rotated immediately.\n\n`;
              }
              
              comment += `### Findings Summary\n\n`;
              
              results.slice(0, 10).forEach((result, index) => {
                const status = result.Verified ? '‚úÖ Verified' : '‚ùì Unverified';
                const file = result.SourceMetadata?.Data?.Filesystem?.file || 'Unknown file';
                const detector = result.DetectorName || 'Unknown detector';
                
                comment += `**${index + 1}.** ${detector} - ${status}\n`;
                comment += `   üìÅ File: \`${file}\`\n`;
                if (result.SourceMetadata?.Data?.Filesystem?.line) {
                  comment += `   üìç Line: ${result.SourceMetadata.Data.Filesystem.line}\n`;
                }
                comment += `\n`;
              });
              
              if (results.length > 10) {
                comment += `\n*... and ${results.length - 10} more finding(s)*\n\n`;
              }
              
              comment += `### üõ†Ô∏è Remediation Steps\n\n`;
              comment += `1. **Immediately rotate/revoke** any verified credentials\n`;
              comment += `2. Remove secrets from code and use environment variables or secret management\n`;
              comment += `3. Update \`.trufflehog-exclude-paths.txt\` if these are false positives\n`;
              comment += `4. Re-run the scan to verify remediation\n\n`;
              comment += `üìö [Secret Management Best Practices](https://docs.github.com/en/actions/security-guides/encrypted-secrets)\n\n`;
              comment += `---\n*ü§ñ Generated by TruffleHog Secret Scanning*`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error creating comment:', error);
            }

      - name: Create Security Advisory
        if: github.event_name == 'schedule' && steps.process-results.outputs.verified_secrets != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Security Alert: ${process.env.VERIFIED_SECRETS} Verified Secrets Detected`;
            const body = `## Scheduled Secret Scan Alert
            
            **Date:** ${new Date().toISOString()}
            **Scan Type:** Full Repository History
            **Verified Secrets Found:** ${process.env.VERIFIED_SECRETS}
            **Total Secrets Found:** ${process.env.TOTAL_SECRETS}
            
            ### Immediate Actions Required
            
            1. Review the workflow run logs for detailed findings
            2. Rotate/revoke all verified credentials immediately
            3. Implement proper secret management practices
            4. Update exclusion patterns if needed
            
            ### Workflow Run
            [View Detailed Results](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            ---
            *This is an automated security alert from TruffleHog secret scanning.*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'secret-scanning', 'high-priority']
            });
        env:
          VERIFIED_SECRETS: ${{ steps.process-results.outputs.verified_secrets }}
          TOTAL_SECRETS: ${{ steps.process-results.outputs.total_secrets }}

      - name: Upload Scan Results
        if: always() && steps.process-results.outputs.secrets_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-scan-results-${{ github.run_id }}
          path: trufflehog_output.json
          retention-days: 30

      - name: Generate Summary
        if: always()
        run: |
          echo "## üîç TruffleHog Secret Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Mode:** ${{ steps.scan-strategy.outputs.mode }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Secrets:** ${{ steps.process-results.outputs.total_secrets }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Verified Secrets:** ${{ steps.process-results.outputs.verified_secrets }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Unverified Secrets:** ${{ steps.process-results.outputs.unverified_secrets }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.process-results.outputs.summary }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail on Verified Secrets
        if: steps.process-results.outputs.verified_secrets != '0'
        run: |
          echo "‚ùå CRITICAL: ${{ steps.process-results.outputs.verified_secrets }} verified secret(s) detected!"
          echo "These are live credentials that pose an immediate security risk."
          echo "Please rotate/revoke these credentials immediately and remove them from the codebase."
          exit 1

      - name: Warning on Unverified Secrets
        if: steps.process-results.outputs.verified_secrets == '0' && steps.process-results.outputs.unverified_secrets != '0'
        run: |
          echo "‚ö†Ô∏è WARNING: ${{ steps.process-results.outputs.unverified_secrets }} unverified secret(s) detected."
          echo "While these couldn't be verified as active, they should be reviewed and potentially removed."
          echo "Consider updating exclusion patterns if these are false positives."